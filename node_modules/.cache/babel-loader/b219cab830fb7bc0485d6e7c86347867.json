{"ast":null,"code":"import _slicedToArray from \"/Users/priyanka/Lambda/slack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyanka/Lambda/slack/src/components/Auth/Register.js\";\nimport React, { useState } from \"react\";\nimport firebase from '../../firebase';\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Register() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        email = _useState4[0],\n        setEmail = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        password = _useState6[0],\n        setPassword = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        passwordConfirmation = _useState8[0],\n        setPasswordConfirmation = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        errors = _useState10[0],\n        setErrors = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        loading = _useState12[0],\n        setLoading = _useState12[1];\n\n  const isFormValid = () => {\n    let error;\n\n    if (isFormEmpty(username, email, password, passwordConfirmation)) {\n      error = {\n        message: \"You need to provide all fields.\"\n      };\n      setErrors(errors => errors.concat(error));\n      return false;\n    } else if (!isPasswordValid(password, passwordConfirmation)) {\n      error = {\n        message: \"Password is invalid\"\n      };\n      setErrors(errors => errors.concat(error));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const isFormEmpty = (username, email, password, passwordConfirmation) => {\n    return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n  };\n\n  const isPasswordValid = (password, passwordConfirmation) => {\n    if (password.length < 6 || passwordConfirmation.length < 6) {\n      return false;\n    } else if (password !== passwordConfirmation) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const displayErrors = errors => errors.map((error, i) => React.createElement(\"p\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, error.message));\n\n  const handleChange = (event, field) => {\n    if (field === 'username') {\n      setUsername(event.target.value);\n    } else if (field === 'email') {\n      setEmail(event.target.value);\n    } else if (field === 'password') {\n      setPassword(event.target.value);\n    } else if (field === 'passwordConfirmation') {\n      setPasswordConfirmation(event.target.value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (isFormValid()) {\n      setErrors([]);\n      setLoading(true);\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(createdUser => {\n        console.log(createdUser);\n        setLoading(false);\n      }).catch(err => {\n        console.log(err);\n        setLoading(false);\n        setErrors(errors.concat(err));\n      });\n    }\n  };\n\n  const handleErrors = field => {\n    return errors.some(error => error.message.toLowerCase().includes(field)) ? \"error\" : \"\";\n  };\n\n  return React.createElement(Grid, {\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    style: {\n      maxWidth: 450\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    icon: true,\n    color: \"green\",\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"puzzle piece\",\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), \"Register for LDSlack\"), React.createElement(Form, {\n    onSubmit: handleSubmit,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    stacked: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Form.Input, {\n    fluid: true,\n    name: \"username\",\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Username\",\n    onChange: event => handleChange(event, \"username\"),\n    value: username,\n    className: handleErrors(\"username\"),\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"email\",\n    icon: \"mail\",\n    iconPosition: \"left\",\n    placeholder: \"Email Address\",\n    onChange: event => handleChange(event, \"email\"),\n    value: email,\n    className: handleErrors(\"email\"),\n    type: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"password\",\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Password\",\n    onChange: event => handleChange(event, \"password\"),\n    value: password,\n    className: handleErrors(\"password\"),\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"passwordConfirmation\",\n    icon: \"repeat\",\n    iconPosition: \"left\",\n    placeholder: \"Password Confirmation\",\n    onChange: event => handleChange(event, \"passwordConfirmation\"),\n    value: passwordConfirmation,\n    className: handleErrors(\"passwordConfirmation\"),\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(Button, {\n    disabled: loading,\n    className: loading ? \"loading\" : \"\",\n    color: \"green\",\n    fluid: true,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Submit\"))), errors.length > 0 && React.createElement(Message, {\n    error: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Error\"), displayErrors(errors)), React.createElement(Message, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Already a user? \", React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Login\"))));\n}\n\nexport default Register;","map":{"version":3,"sources":["/Users/priyanka/Lambda/slack/src/components/Auth/Register.js"],"names":["React","useState","firebase","Grid","Form","Segment","Button","Header","Message","Icon","Link","Register","username","setUsername","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","errors","setErrors","loading","setLoading","isFormValid","error","isFormEmpty","message","concat","isPasswordValid","length","displayErrors","map","i","handleChange","event","field","target","value","handleSubmit","preventDefault","auth","createUserWithEmailAndPassword","then","createdUser","console","log","catch","err","handleErrors","some","toLowerCase","includes","maxWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,OAHF,EAIEC,MAJF,EAKEC,MALF,EAMEC,OANF,EAOEC,IAPF,QAQO,mBARP;AASA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,QAAT,GAAoB;AAAA,oBACcV,QAAQ,CAAC,EAAD,CADtB;AAAA;AAAA,QACXW,QADW;AAAA,QACDC,WADC;;AAAA,qBAEQZ,QAAQ,CAAC,EAAD,CAFhB;AAAA;AAAA,QAEXa,KAFW;AAAA,QAEJC,QAFI;;AAAA,qBAGcd,QAAQ,CAAC,EAAD,CAHtB;AAAA;AAAA,QAGXe,QAHW;AAAA,QAGDC,WAHC;;AAAA,qBAIsChB,QAAQ,CAAC,EAAD,CAJ9C;AAAA;AAAA,QAIXiB,oBAJW;AAAA,QAIWC,uBAJX;;AAAA,qBAKUlB,QAAQ,CAAC,EAAD,CALlB;AAAA;AAAA,QAKXmB,MALW;AAAA,QAKHC,SALG;;AAAA,sBAMYpB,QAAQ,CAAC,KAAD,CANpB;AAAA;AAAA,QAMXqB,OANW;AAAA,QAMFC,UANE;;AAQlB,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIC,KAAJ;;AACA,QAAIC,WAAW,CAACd,QAAD,EAAWE,KAAX,EAAkBE,QAAlB,EAA4BE,oBAA5B,CAAf,EAAkE;AAChEO,MAAAA,KAAK,GAAG;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAR;AACAN,MAAAA,SAAS,CAACD,MAAM,IAAIA,MAAM,CAACQ,MAAP,CAAcH,KAAd,CAAX,CAAT;AACA,aAAO,KAAP;AACD,KAJD,MAIO,IAAI,CAACI,eAAe,CAACb,QAAD,EAAWE,oBAAX,CAApB,EAAsD;AAC3DO,MAAAA,KAAK,GAAG;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAR;AACAN,MAAAA,SAAS,CAACD,MAAM,IAAIA,MAAM,CAACQ,MAAP,CAAcH,KAAd,CAAX,CAAT;AACA,aAAO,KAAP;AACD,KAJM,MAIA;AACL,aAAO,IAAP;AACD;AACF,GAbD;;AAeA,QAAMC,WAAW,GAAG,CAACd,QAAD,EAAWE,KAAX,EAAkBE,QAAlB,EAA4BE,oBAA5B,KAAqD;AACvE,WAAO,CAACN,QAAQ,CAACkB,MAAV,IAAoB,CAAChB,KAAK,CAACgB,MAA3B,IAAqC,CAACd,QAAQ,CAACc,MAA/C,IAAyD,CAACZ,oBAAoB,CAACY,MAAtF;AACD,GAFD;;AAIA,QAAMD,eAAe,GAAG,CAACb,QAAD,EAAWE,oBAAX,KAAoC;AAC1D,QAAIF,QAAQ,CAACc,MAAT,GAAkB,CAAlB,IAAuBZ,oBAAoB,CAACY,MAArB,GAA8B,CAAzD,EAA4D;AAC1D,aAAO,KAAP;AACD,KAFD,MAEO,IAAId,QAAQ,KAAKE,oBAAjB,EAAuC;AAC5C,aAAO,KAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;AACF,GARD;;AAUA,QAAMa,aAAa,GAAGX,MAAM,IAAIA,MAAM,CAACY,GAAP,CAAW,CAACP,KAAD,EAAQQ,CAAR,KAAc;AAAG,IAAA,GAAG,EAAEA,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYR,KAAK,CAACE,OAAlB,CAAzB,CAAhC;;AAEA,QAAMO,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrC,QAAIA,KAAK,KAAK,UAAd,EAA0B;AACxBvB,MAAAA,WAAW,CAACsB,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAX;AACD,KAFD,MAEO,IAAIF,KAAK,KAAK,OAAd,EAAuB;AAC5BrB,MAAAA,QAAQ,CAACoB,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAR;AACD,KAFM,MAEA,IAAIF,KAAK,KAAK,UAAd,EAA0B;AAC/BnB,MAAAA,WAAW,CAACkB,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAX;AACD,KAFM,MAEA,IAAIF,KAAK,KAAK,sBAAd,EAAsC;AAC3CjB,MAAAA,uBAAuB,CAACgB,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAvB;AACD;AACF,GAVD;;AAYA,QAAMC,YAAY,GAAGJ,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACK,cAAN;;AACA,QAAIhB,WAAW,EAAf,EAAmB;AACjBH,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACArB,MAAAA,QAAQ,CACLuC,IADH,GAEGC,8BAFH,CAEkC5B,KAFlC,EAEyCE,QAFzC,EAGG2B,IAHH,CAGQC,WAAW,IAAI;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACArB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OANH,EAOGwB,KAPH,CAOSC,GAAG,IAAI;AACZH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAzB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,QAAAA,SAAS,CAACD,MAAM,CAACQ,MAAP,CAAcoB,GAAd,CAAD,CAAT;AACD,OAXH;AAYD;AACF,GAlBD;;AAoBA,QAAMC,YAAY,GAAGb,KAAK,IAAI;AAC5B,WAAOhB,MAAM,CAAC8B,IAAP,CAAYzB,KAAK,IAAIA,KAAK,CAACE,OAAN,CAAcwB,WAAd,GAA4BC,QAA5B,CAAqChB,KAArC,CAArB,IAAoE,OAApE,GAA8E,EAArF;AACD,GAFD;;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,aAAa,EAAC,QAAvC;AAAgD,IAAA,SAAS,EAAC,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE;AAAEiB,MAAAA,QAAQ,EAAE;AAAZ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAgB,IAAA,IAAI,MAApB;AAAqB,IAAA,KAAK,EAAC,OAA3B;AAAmC,IAAA,SAAS,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,KAAK,EAAC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,yBADF,EAKE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEd,YAAhB;AAA8B,IAAA,IAAI,EAAC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,OAAO,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,WAAW,EAAC,UALd;AAME,IAAA,QAAQ,EAAEJ,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQ,UAAR,CANjC;AAOE,IAAA,KAAK,EAAEvB,QAPT;AAQE,IAAA,SAAS,EAAEqC,YAAY,CAAC,UAAD,CARzB;AASE,IAAA,IAAI,EAAC,MATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,WAAW,EAAC,eALd;AAME,IAAA,QAAQ,EAAEd,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQ,OAAR,CANjC;AAOE,IAAA,KAAK,EAAErB,KAPT;AAQE,IAAA,SAAS,EAAEmC,YAAY,CAAC,OAAD,CARzB;AASE,IAAA,IAAI,EAAC,OATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAuBE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,WAAW,EAAC,UALd;AAME,IAAA,QAAQ,EAAEd,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQ,UAAR,CANjC;AAOE,IAAA,KAAK,EAAEnB,QAPT;AAQE,IAAA,SAAS,EAAEiC,YAAY,CAAC,UAAD,CARzB;AASE,IAAA,IAAI,EAAC,UATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,EAkCE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,sBAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,WAAW,EAAC,uBALd;AAME,IAAA,QAAQ,EAAEd,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQ,sBAAR,CANjC;AAOE,IAAA,KAAK,EAAEjB,oBAPT;AAQE,IAAA,SAAS,EAAE+B,YAAY,CAAC,sBAAD,CARzB;AASE,IAAA,IAAI,EAAC,UATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,EA8CE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAE3B,OADZ;AAEE,IAAA,SAAS,EAAEA,OAAO,GAAG,SAAH,GAAe,EAFnC;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,KAAK,MAJP;AAKE,IAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CF,CADF,CALF,EA+DGF,MAAM,CAACU,MAAP,GAAgB,CAAhB,IACC,oBAAC,OAAD;AAAS,IAAA,KAAK,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGC,aAAa,CAACX,MAAD,CAFhB,CAhEJ,EAqEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACkB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADlB,CArEF,CADF,CADF;AA6ED;;AAED,eAAeT,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport firebase from '../../firebase';\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Register() {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [errors, setErrors] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const isFormValid = () => {\n    let error;\n    if (isFormEmpty(username, email, password, passwordConfirmation)) {\n      error = { message: \"You need to provide all fields.\"};\n      setErrors(errors => errors.concat(error));\n      return false;\n    } else if (!isPasswordValid(password, passwordConfirmation)) {\n      error = { message: \"Password is invalid\"};\n      setErrors(errors => errors.concat(error));\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const isFormEmpty = (username, email, password, passwordConfirmation) => {\n    return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n  }\n\n  const isPasswordValid = (password, passwordConfirmation) => {\n    if (password.length < 6 || passwordConfirmation.length < 6) {\n      return false;\n    } else if (password !== passwordConfirmation) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const displayErrors = errors => errors.map((error, i) => <p key={i}>{error.message}</p>)\n\n  const handleChange = (event, field) => {\n    if (field === 'username') {\n      setUsername(event.target.value);\n    } else if (field === 'email') {\n      setEmail(event.target.value);\n    } else if (field === 'password') {\n      setPassword(event.target.value);\n    } else if (field === 'passwordConfirmation') {\n      setPasswordConfirmation(event.target.value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (isFormValid()) {\n      setErrors([]);\n      setLoading(true);\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(createdUser => {\n          console.log(createdUser);\n          setLoading(false);\n        })\n        .catch(err => {\n          console.log(err);\n          setLoading(false);\n          setErrors(errors.concat(err));\n        });\n    }\n  }\n\n  const handleErrors = field => {\n    return errors.some(error => error.message.toLowerCase().includes(field)) ? \"error\" : \"\"\n  }\n\n  return (\n    <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" icon color=\"green\" textAlign=\"center\">\n          <Icon name=\"puzzle piece\" color=\"green\" />\n          Register for LDSlack\n        </Header>\n        <Form onSubmit={handleSubmit} size=\"large\">\n          <Segment stacked>\n            <Form.Input\n              fluid\n              name=\"username\"\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"Username\"\n              onChange={event => handleChange(event, \"username\")}\n              value={username}\n              className={handleErrors(\"username\")}\n              type=\"text\"\n            />\n            <Form.Input\n              fluid\n              name=\"email\"\n              icon=\"mail\"\n              iconPosition=\"left\"\n              placeholder=\"Email Address\"\n              onChange={event => handleChange(event, \"email\")}\n              value={email}\n              className={handleErrors(\"email\")}\n              type=\"email\"\n            />\n            <Form.Input\n              fluid\n              name=\"password\"\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              onChange={event => handleChange(event, \"password\")}\n              value={password}\n              className={handleErrors(\"password\")}\n              type=\"password\"\n            />\n            <Form.Input\n              fluid\n              name=\"passwordConfirmation\"\n              icon=\"repeat\"\n              iconPosition=\"left\"\n              placeholder=\"Password Confirmation\"\n              onChange={event => handleChange(event, \"passwordConfirmation\")}\n              value={passwordConfirmation}\n              className={handleErrors(\"passwordConfirmation\")}\n              type=\"password\"\n            />\n\n            <Button\n              disabled={loading}\n              className={loading ? \"loading\" : \"\"}\n              color=\"green\"\n              fluid\n              size=\"large\"\n            >\n              Submit\n            </Button>\n          </Segment>\n        </Form>\n        {errors.length > 0 && (\n          <Message error>\n            <h3>Error</h3>\n            {displayErrors(errors)}\n          </Message>\n        )}\n        <Message>\n          Already a user? <Link to=\"/login\">Login</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}