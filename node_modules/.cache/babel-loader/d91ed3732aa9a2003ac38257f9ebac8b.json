{"ast":null,"code":"import _slicedToArray from \"/Users/priyanka/Lambda/slack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyanka/Lambda/slack/src/components/Auth/Register.js\";\nimport React, { useState } from \"react\";\nimport firebase from '../../firebase';\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Register() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        email = _useState4[0],\n        setEmail = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        password = _useState6[0],\n        setPassword = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        passwordConfirmation = _useState8[0],\n        setPasswordConfirmation = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        errors = _useState10[0],\n        setErrors = _useState10[1];\n\n  const isFormValid = () => {\n    let error;\n\n    if (isFormEmpty(username, email, password, passwordConfirmation)) {\n      error = {\n        message: \"You need to provide all fields.\"\n      };\n    } else if (isPasswordValid()) {// throw error\n    } else {\n      return true;\n    }\n  };\n\n  const isFormEmpty = (username, email, password, passwordConfirmation) => {\n    return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n  };\n\n  const handleChange = (event, field) => {\n    if (field == 'username') {\n      setUsername(event.target.value);\n    } else if (field == 'email') {\n      setEmail(event.target.value);\n    } else if (field == 'password') {\n      setPassword(event.target.value);\n    } else if (field == 'passwordConfirmation') {\n      setPasswordConfirmation(event.target.value);\n    }\n  };\n\n  const handleSubmit = event => {\n    if (isFormValid()) {\n      event.preventDefault();\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(createdUser => {\n        console.log(createdUser);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  return React.createElement(Grid, {\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    style: {\n      maxWidth: 450\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    icon: true,\n    color: \"green\",\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"puzzle piece\",\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), \"Register for LDSlack\"), React.createElement(Form, {\n    onSubmit: handleSubmit,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    stacked: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Form.Input, {\n    fluid: true,\n    name: \"username\",\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Username\",\n    onChange: event => handleChange(event, \"username\"),\n    value: username,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"email\",\n    icon: \"mail\",\n    iconPosition: \"left\",\n    placeholder: \"Email Address\",\n    onChange: event => handleChange(event, \"email\"),\n    value: email,\n    type: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"password\",\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Password\",\n    onChange: event => handleChange(event, \"password\"),\n    value: password,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    fluid: true,\n    name: \"passwordConfirmation\",\n    icon: \"repeat\",\n    iconPosition: \"left\",\n    placeholder: \"Password Confirmation\",\n    onChange: event => handleChange(event, \"passwordConfirmation\"),\n    value: passwordConfirmation,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(Button, {\n    color: \"green\",\n    fluid: true,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Submit\"))), React.createElement(Message, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Already a user? \", React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Login\"))));\n}\n\nexport default Register;","map":{"version":3,"sources":["/Users/priyanka/Lambda/slack/src/components/Auth/Register.js"],"names":["React","useState","firebase","Grid","Form","Segment","Button","Header","Message","Icon","Link","Register","username","setUsername","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","errors","setErrors","isFormValid","error","isFormEmpty","message","isPasswordValid","length","handleChange","event","field","target","value","handleSubmit","preventDefault","auth","createUserWithEmailAndPassword","then","createdUser","console","log","catch","err","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport firebase from '../../firebase';\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Register() {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [errors, setErrors] = useState([]);\n\n  const isFormValid = () => {\n    let error;\n    if (isFormEmpty(username, email, password, passwordConfirmation)) {\n      error = { message: \"You need to provide all fields.\"};\n    } else if (isPasswordValid()) {\n      // throw error\n    } else {\n      return true;\n    }\n  }\n\n  const isFormEmpty = (username, email, password, passwordConfirmation) => {\n    return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n  }\n\n  const handleChange = (event, field) => {\n    if (field == 'username') {\n      setUsername(event.target.value);\n    } else if (field == 'email') {\n      setEmail(event.target.value);\n    } else if (field == 'password') {\n      setPassword(event.target.value);\n    } else if (field == 'passwordConfirmation') {\n      setPasswordConfirmation(event.target.value);\n    }\n  };\n\n  const handleSubmit = event => {\n    if (isFormValid()) {\n      event.preventDefault();\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(createdUser => {\n          console.log(createdUser);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n  }\n\n  return (\n    <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" icon color=\"green\" textAlign=\"center\">\n          <Icon name=\"puzzle piece\" color=\"green\" />\n          Register for LDSlack\n        </Header>\n        <Form onSubmit={handleSubmit} size=\"large\">\n          <Segment stacked>\n            <Form.Input\n              fluid\n              name=\"username\"\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"Username\"\n              onChange={event => handleChange(event, \"username\")}\n              value={username}\n              type=\"text\"\n            />\n            <Form.Input\n              fluid\n              name=\"email\"\n              icon=\"mail\"\n              iconPosition=\"left\"\n              placeholder=\"Email Address\"\n              onChange={event => handleChange(event, \"email\")}\n              value={email}\n              type=\"email\"\n            />\n            <Form.Input\n              fluid\n              name=\"password\"\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              onChange={event => handleChange(event, \"password\")}\n              value={password}\n              type=\"password\"\n            />\n            <Form.Input\n              fluid\n              name=\"passwordConfirmation\"\n              icon=\"repeat\"\n              iconPosition=\"left\"\n              placeholder=\"Password Confirmation\"\n              onChange={event => handleChange(event, \"passwordConfirmation\")}\n              value={passwordConfirmation}\n              type=\"password\"\n            />\n\n            <Button color=\"green\" fluid size=\"large\">\n              Submit\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          Already a user? <Link to=\"/login\">Login</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}